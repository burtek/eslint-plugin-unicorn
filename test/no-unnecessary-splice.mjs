import outdent from 'outdent';
import {getTester} from './utils/test.mjs';

const {test} = getTester(import.meta);

test.snapshot({
	valid: [
		'array.splice(0, 2)',
		'array.splice(0, 2, "element")',
		'array.splice(0, 1, "element1", "element2")',
		'array.splice(2, 1)',
		'array.splice(index, 1)',
		'array.splice(array.length - 2, 1)',
		'array.splice(array.length - 2, 2)',
		'array.splice(array.length - 1, 1, "element")',
		'array.splice(array[length] - 1, 1, "element1", "element2")',

		'array[splice](0, 0)',
		'array[splice](1, 0)',
		'array[splice](0, 1)',
		'array[splice](0, 0, "element")',
		'array[splice](0, 0, "element1", "element2")',
		'array[splice](array.length - 1, 1)',
		'array[splice](array.length, 0, "element")',
		'array[splice](array.length, 0, "element1", "element2")',

		'array.splice(otherArray.length - 1, 1)',
		'array.splice(otherArray.length, 0, "element")',
		'array.splice(otherArray.length, 0, "element1", "element2")',

		'getArr().splice(0, 0)',
		'chain.call.splice(0, 0)',
		'[].splice(0, 0)',
	],
	invalid: [
		'array.splice(0, 0)',
		'array.splice(1, 0)',
		'array.splice(0, 1)',
		'array.splice(0, 0, "element")',
		'array.splice(0, 0, "element1", ...moreElements)',
		'array.splice(array["length"] - 1, 1)',
		'array.splice(array.length - 1, 1)',
		'array.splice(array["length"], 0, "element")',
		'array.splice(array.length, 0, "element1", "element2")',

		'array["splice"](0, 0)',
		'array["splice"](1, 0)',
		'array["splice"](0, 1)',
		'array["splice"](0, 0, "element")',
		'array["splice"](0, 0, "element1", "element2")',
		'array["splice"](array.length - 1, 1)',
		'array["splice"](array.length, 0, "element")',
		'array["splice"](array.length, 0, "element1", "element2")',

		'const ret = array.splice(0, 0)',
		'const ret = array.splice(1, 0)',
		'const ret = array.splice(0, 1)',
		'const ret = array.splice(0, 0, "element")',
		'const ret = array.splice(0, 0, "element1", "element2")',
		'const ret = array.splice(array.length - 1, 1)',
		'const ret = array.splice(array.length, 0, "element")',
		'const ret = array.splice(array.length, 0, "element1", "element2")',

		'fn(array.splice(0, 0))',
		'fn(array.splice(1, 0))',
		'fn(array.splice(0, 1))',
		'fn(array.splice(0, 0, "element"))',
		'fn(array.splice(0, 0, "element1", "element2"))',
		'fn(array.splice(array.length - 1, 1))',
		'fn(array.splice(array.length, 0, "element"))',
		'fn(array.splice(array.length, 0, "element1", "element2"))',

		'function fn(array) { return array.splice(0, 0) }',
		'function fn(array) { return array.splice(1, 0) }',
		'function fn(array) { return array.splice(0, 1) }',
		'function fn(array) { return array.splice(0, 0, "element") }',
		'function fn(array) { return array.splice(0, 0, "element1", "element2") }',
		'function fn(array) { return array.splice(array.length - 1, 1) }',
		'function fn(array) { return array.splice(array.length, 0, "element") }',
		'function fn(array) { return array.splice(array.length, 0, "element1", "element2") }',

		'array => array.splice(0, 0)',
		'array => array.splice(1, 0)',
		'array => array.splice(0, 1)',
		'array => array.splice(0, 0, "element")',
		'array => array.splice(0, 0, "element1", "element2")',
		'array => array.splice(array.length - 1, 1)',
		'array => array.splice(array.length, 0, "element")',
		'array => array.splice(array.length, 0, "element1", "element2")',

		'const obj = { property: array.splice(0, 0) }',
		'const obj = { property: array.splice(1, 0) }',
		'const obj = { property: array.splice(0, 1) }',
		'const obj = { property: array.splice(0, 0, "element") }',
		'const obj = { property: array.splice(0, 0, "element1", "element2") }',
		'const obj = { property: array.splice(array.length - 1, 1) }',
		'const obj = { property: array.splice(array.length, 0, "element") }',
		'const obj = { property: array.splice(array.length, 0, "element1", "element2") }',
	],
});
